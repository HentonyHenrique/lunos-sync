unit frmConfig;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, IniFiles,
  System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.PG,
  FireDAC.Phys.PGDef, FireDAC.VCLUI.Wait, Data.DB, FireDAC.Comp.Client,
  Vcl.StdCtrls, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf,
  FireDAC.DApt, FireDAC.Comp.DataSet, Vcl.Mask, Vcl.DBCtrls, Vcl.ExtCtrls,
  Data.Bind.Controls, Vcl.Buttons, Vcl.Bind.Navigator, Vcl.Grids, Vcl.DBGrids,
  Vcl.ToolWin, Vcl.ComCtrls, Vcl.Imaging.pngimage;

type
  TfrmSettings = class(TForm)
    gridConfig: TDBGrid;
    Panel1: TPanel;
    Label2: TLabel;
    Panel2: TPanel;
    Image1: TImage;
    Panel3: TPanel;
    dbEditName: TDBEdit;
    dbEditeLitros: TDBEdit;
    dbEditAtivo: TDBEdit;
    Image2: TImage;
    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Image1Click(Sender: TObject);
    procedure gridConfigDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure dbEditAtivoKeyPress(Sender: TObject; var Key: Char);
    procedure Image2Click(Sender: TObject);
  private
  public
    ArqIni: TIniFile;
  end;

var
  frmSettings: TfrmSettings;

implementation

{$R *.dfm}

uses moduleDB, frmLogin;

procedure TfrmSettings.Button1Click(Sender: TObject);
begin

  with dbModule.queryInsertNomes do
  begin
    Close;
    sql.Clear;
    sql.add('select p.nome as nome,e.cpf as cnpj,e.nome_reduzido ,d.produto as grid,d.grid,d.empresa from '
      + 'deposito d join empresa e on (e.grid=d.empresa) join produto p on (p.grid=d.produto) where d.empresa=(Select grid from empresa_local) and d.flag=''A''');
    Open;
    Connection.StartTransaction;
    dbModule.queryVerify.sql.add
      ('select count(:grid), count(:cnpj) from combustiveis');
    dbModule.queryVerify.Params.ParamByName('cnpj').Value :=
      FieldByName('cnpj').Value;
    dbModule.queryVerify.Params.ParamByName('grid').Value :=
      FieldByName('grid').Value;

    if not IsEmpty then
    begin
      try
        while not dbModule.queryInsertNomes.Eof do
        begin

          dbModule.queryCombustivel.sql.Clear;
          dbModule.queryCombustivel.sql.add
            ('INSERT IGNORE INTO combustiveis (nome, cnpj_posto, grid_combustivel, cnpj_grid)'
            + 'VALUES (:nome, :cnpj, :grid, concat(:cnpj,:grid))').ToString;
          dbModule.queryCombustivel.Params.ParamByName('nome').AsString :=
            FieldByName('nome').AsString;
          dbModule.queryCombustivel.Params.ParamByName('cnpj').AsString :=
            FieldByName('cnpj').AsString;
          dbModule.queryCombustivel.Params.ParamByName('grid').AsString :=
            FieldByName('grid').AsString;
          dbModule.queryCombustivel.Prepare;

          dbModule.queryCombustivel.ExecSQL(true);
          Next;

        end;
        Connection.Commit;
      except
        Connection.Rollback;
        raise;
      end;
    end
    else
    begin
      showMessage('Não há nada para ser inserido');
    end;
  end;
  showMessage('Dados Atualizados com sucesso!');
  frmSettings.Close;

end;

procedure TfrmSettings.gridConfigDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
  if not odd(dbModule.queryBico.RecNo) then
    if not(gdSelected in State) then
    begin
      gridConfig.Canvas.Brush.Color := clSilver;
      gridConfig.Canvas.Font.Color := clBlack;
      gridConfig.Canvas.FillRect(Rect);
      gridConfig.DefaultDrawDataCell(Rect, Column.Field, State);
    end;

  With gridConfig do

  begin

    if (State = [gdSelected]) or (State = [gdFocused]) or

      (State = [gdSelected, gdFocused]) then

    begin

      Canvas.Brush.Color := clMenuHighlight;

      Canvas.Font.Color := clWhite;

      Canvas.FillRect(Rect);

      DefaultDrawDataCell(Rect, Column.Field, State);

    end

  end;
end;

procedure TfrmSettings.dbEditAtivoKeyPress(Sender: TObject; var Key: Char);
begin
  if (Key <> #8) then // pra permitir o backspace
    if not(Key in ['s', 'S', 'n', 'N']) then
      Key := #0;
end;

procedure TfrmSettings.FormCreate(Sender: TObject);
var
  cnpj: string;
begin
  Close;
  dbModule.queryInsertNomes.sql.Clear;
  dbModule.queryInsertNomes.sql.add
    ('select p.nome as nome,e.cpf as cnpj,e.nome_reduzido ,d.produto as grid,d.grid,d.empresa from '
    + 'deposito d join empresa e on (e.grid=d.empresa) join produto p on (p.grid=d.produto) where d.empresa=(Select grid from empresa_local) and d.flag=''A''');
  dbModule.queryInsertNomes.Open;
  cnpj := dbModule.queryInsertNomes.FieldByName('cnpj').Value;

  try
    dbModule.queryCombustivel.Close;
    dbModule.queryCombustivel.sql.Clear;
    dbModule.queryCombustivel.sql.add
      ('select * from combustiveis where cnpj_posto=:check').ToString;
    ArqIni := TIniFile.Create('config.ini');
    dbModule.queryCombustivel.Params.ParamByName('check').AsString := cnpj;
    dbModule.queryCombustivel.Active := true;
    dbModule.queryCombustivel.Open;

  except

  end;

end;

procedure TfrmSettings.Image1Click(Sender: TObject);
begin

  with dbModule.queryInsertNomes do
  begin
    Close;
    sql.Clear;
    sql.add('select p.nome as nome,e.cpf as cnpj,e.nome_reduzido ,d.produto as grid,d.grid,d.empresa from '
      + 'deposito d join empresa e on (e.grid=d.empresa) join produto p on (p.grid=d.produto) where d.empresa=(Select grid from empresa_local) and d.flag=''A''');
    Open;
    Connection.StartTransaction;
    dbModule.queryVerify.sql.add
      ('select count(:grid), count(:cnpj) from combustiveis');
    dbModule.queryVerify.Params.ParamByName('cnpj').Value :=
      FieldByName('cnpj').Value;
    dbModule.queryVerify.Params.ParamByName('grid').Value :=
      FieldByName('grid').Value;

    if not IsEmpty then
    begin
      try
        while not dbModule.queryInsertNomes.Eof do
        begin

          dbModule.queryCombustivel.sql.Clear;
          dbModule.queryCombustivel.sql.add
            ('INSERT IGNORE INTO combustiveis (nome, cnpj_posto, grid_combustivel, cnpj_grid)'
            + 'VALUES (:nome, :cnpj, :grid, concat(:cnpj,:grid))').ToString;
          dbModule.queryCombustivel.Params.ParamByName('nome').AsString :=
            FieldByName('nome').AsString;
          dbModule.queryCombustivel.Params.ParamByName('cnpj').AsString :=
            FieldByName('cnpj').AsString;
          dbModule.queryCombustivel.Params.ParamByName('grid').AsString :=
            FieldByName('grid').AsString;
          dbModule.queryCombustivel.Prepare;

          dbModule.queryCombustivel.ExecSQL(true);
          Next;

        end;
        Connection.Commit;
      except
        Connection.Rollback;
        raise;
      end;
    end
    else
    begin
      showMessage('Não há nada para ser inserido');
    end;
  end;
  showMessage('Dados Atualizados com sucesso!');
  frmSettings.Close;

end;

procedure TfrmSettings.Image2Click(Sender: TObject);
begin
  dbModule.updateCombustiveisMysql.sql.Clear;
  dbModule.updateCombustiveisMysql.sql.add
    ('update combustiveis set limite_litros = :limite_litros, ativo = :ativo where cnpj_posto = :cnpj_posto and nome = :nome');
  dbModule.updateCombustiveisMysql.ParamByName('limite_litros').Value :=
    dbEditeLitros.text;
  dbModule.updateCombustiveisMysql.ParamByName('ativo').Value :=
    dbEditAtivo.text;
  dbModule.updateCombustiveisMysql.ParamByName('cnpj_posto').Value :=
    frmAuth.cnpj_logado;
  dbModule.updateCombustiveisMysql.ParamByName('nome').Value := dbEditName.text;
  dbModule.updateCombustiveisMysql.Prepare;
  dbModule.updateCombustiveisMysql.ExecSQL;
  dbModule.queryCombustivel.Active := false;
  dbModule.queryCombustivel.Active := true;
end;

end.
